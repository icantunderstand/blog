{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/2023-2-1",
    "result": {"data":{"markdownRemark":{"html":"<h2><a href=\"https://www.builder.io/blog/structured-clone\">Deep Cloning Objects in JavaScript, the Modern Way</a></h2>\n<p>structured-clone是在结构化克隆算法的基础上实现的克隆方案。结构化克隆算法会有一些限制:</p>\n<ul>\n<li>Function对象和DOM节点是不能被结构化克隆算法复制,会抛出DATA_CLONE_ERR</li>\n<li>对象的某些特定参数也不会被保留,比如RegExp 对象的 lastIndex 字段不会被保留、属性描述符、原型链上的属性等</li>\n</ul>\n<p>对比几种clone方案:</p>\n<ul>\n<li>对象扩展符和Object.assign不能实现深克隆</li>\n<li>JSON.parse(JSON.stringify(x))  JSON.stringify无法处理循环引用数据、丢失内置类型(Map/Set/Date/Symbol等)、无法复制函数</li>\n<li>cloneDeep是一个比较成熟的方案，但是它的包体积有点大材小用(在平时的使用中其实很少用到那么复杂结构的数据)</li>\n</ul>\n<h2><a href=\"https://jakearchibald.com/2023/unhandled-rejections/#unhandled-rejections-are-problematic\">The gotcha of unhandled promise rejections</a></h2>\n<p>这篇文章介绍for wait中unhandled promise的处理方式</p>\n<h2><a href=\"https://blog.codeminer42.com/everything-you-need-to-know-about-concurrent-react-with-a-little-bit-of-suspense/\">Everything you need to know about Concurrent React (with a little bit of Suspense)</a></h2>\n<p>这篇文章介绍React Concurrent mode.通过例子引入Concurrent mode中高优先级和低优先级任务的处理，比较生动。</p>\n<h2><a href=\"https://www.macarthur.me/posts/options-for-removing-event-listeners\">You’ve Got Options for Removing Event Listeners</a></h2>\n<p>在之前的文章<a href=\"https://icantunderstand.github.io/blog/axios-cancel\">axios的cancel功能源码解读</a>中axios已经AbortController来实现请求的终止，这篇文章中介绍了使用AbortController实现网页中元素绑定事件的移除</p>\n<h2><a href=\"https://deno.com/blog/the-future-of-web-is-on-the-edge\">The Future of the Web is on the Edge</a></h2>\n<p>这篇文章简单介绍Serverless的概念，可以结合<a href=\"https://juejin.cn/post/6996271746898722830\">为什么我不使用Serverless</a>，<a href=\"https://www.zhihu.com/question/506704568\">如何评价无服务器计算（serverless）的未来前景？你认为 serverless 有未来吗？</a>进一步了解Serverless</p>\n<h2>工具</h2>\n<h3><a href=\"https://mafs.dev/\">Mafs</a></h3>\n<p>实现可交互的数学视图的React库</p>\n<h3><a href=\"https://github.com/mswjs/msw\">msw</a></h3>\n<p>一个支持在浏览器和node环境中实现Mock Server的库，在浏览器中它通过Service Worker或者通过拦截原生的fetch实现mock，在node中通过拦截器封装原生的http模块实现mock.</p>\n<h3><a href=\"https://github.com/nolimits4web/swiper\">swiper</a></h3>\n<p>移动端的swiper组件，有比较多的动效支持</p>\n<h2>参考</h2>\n<p><a href=\"https://juejin.cn/post/7044934738431180830\">最新HTML规范——structuredClone深拷贝函数，能取代JSON或者lodash吗？</a>\r\n<a href=\"https://stackoverflow.com/questions/59694309/for-await-of-vs-promise-all\">for await of VS Promise.all</a></p>","frontmatter":{"date":"2023-02-13","path":"/2023-2-1","title":"2023-2-1-前端快报"}}},"pageContext":{"readingTime":"3 min read"}},
    "staticQueryHashes": []}