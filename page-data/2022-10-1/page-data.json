{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/2022-10-1",
    "result": {"data":{"markdownRemark":{"html":"<h2><a href=\"https://legendapp.com/open-source/legend-state/\">Making React fast by default and truly reactive</a></h2>\n<p>这篇文章通过介绍React中组件渲染优化的问题引出类mobx的状态库方案<a href=\"https://github.com/LegendApp/legend-state\">legend-state</a>,在底层的技术方案上跟mobx是相似的，通过监听observable值的变化来运行渲染函数。</p>\n<h2><a href=\"https://blog.isquaredsoftware.com/2020/05/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior/\">A (Mostly) Complete Guide to React Rendering Behavior</a></h2>\n<p>这篇文章比较详细的介绍了React组件渲染的细节，包括渲染的阶段、Fiber、渲染优化等。</p>\n<h2><a href=\"https://prateeksurana.me/blog/future-of-rendering-in-react/\">The future of rendering in React</a></h2>\n<p>这篇文章主要介绍基于react的页面渲染流程和渲染方式的优缺点。</p>\n<ol>\n<li>CSR(Client-side rendering)- 客户端渲染。这种渲染方式通过在客户侧的浏览器执行脚本来完成整个页面内容的生成和数据的加载。 这种方式可以通过CDN去优化JS脚本的加载，能有效的提交TTFB(Time To First Byte),但是由于页面和数据都是在客户端组装和渲染会影响用户的首次可交互时间和不方便做SEO优化。</li>\n<li>SSR(Server-side rendering)- 服务端渲染。这种渲染方式通过react提供的api在服务端组装数据和渲染页面内容。服务端渲染的优势在于有利于SEO优化，能有效的提供FCP(First Contentful Paint)和LCP(Largest Contentful Paint),劣势是服务端渲染会降低TTFB,但是可以通过一些手段去优化，比如\n<ul>\n<li>SSG(Static site generation)- 静态页面生成  将不依赖数据的页面提前进行预编译，在访问的时候直接将已编译好的页面内容返回</li>\n<li>ISR (Incremental static site generation)- 增量式页面生层 ISR为了解决SSG的对动态数据依赖和构建规模问题，可以在运行时动态的生成页面内容并存储</li>\n<li>Streaming SSR- 流式服务端渲染 主要使用node中的stream实现流式的返回服务端渲染的内容，能有效的提高TTFB</li>\n</ul>\n</li>\n</ol>\n<h2><a href=\"https://alexkondov.com/half-hour-to-learn-js/\">A Half-Hour to Learn JavaScript</a></h2>\n<p>这篇文章介绍JavaScript中的基础知识点，包括变量声明、闭包、this、new关键字、原型链、继承、异步调用(async await,Promise)、事件循环等，适合复习基础的时候浏览查缺补漏。</p>\n<h2><a href=\"https://2ality.com/2022/10/javascript-decorators.html\">JavaScript metaprogramming with the 2022-03 decorators API</a></h2>\n<p>这篇文章详细的介绍了JavaScript中装饰器的细节</p>\n<h2>工具</h2>\n<h3><a href=\"https://github.com/google/zx\">zx</a></h3>\n<p>google的一个脚本工具，可以在脚本中写javascript，值得一试</p>\n<h2>源码解读</h2>\n<h3><a href=\"https://github.com/SortableJS/Sortable\">Sortable</a>源码解读</h3>\n<p>Sortable是一个实现可拖拽列表的库，它提供了丰富的功能比如共享列表的拖拽、多条目的拖拽等。以下主要从两方面对Sortable的源码进行简单的分析，希望对功能库的设计有所思考</p>\n<ol>\n<li>插件机制</li>\n<li>拖拽功能实现</li>\n</ol>\n<h4>插件机制</h4>\n<ul>\n<li>插件能很好的实现功能的隔离。插件内功能逻辑自治，</li>\n<li>通过统一的接口提供接入和调用能力。便于后续功能的扩展</li>\n<li>通过组合插件，可以提供多版本的库</li>\n</ul>\n<h5>插件注册</h5>\n<pre><code>    //  通过mount方法调用PluginManager的mount来注册插件\r\n    Sortable.mount = function(...plugins) {\r\n        if (plugins[0].constructor === Array) plugins = plugins[0];\r\n\r\n        plugins.forEach((plugin) => {\r\n            if (!plugin.prototype || !plugin.prototype.constructor) {\r\n                throw `Sortable: Mounted plugin must be a constructor function, not ${ {}.toString.call(plugin) }`;\r\n            }\r\n            if (plugin.utils) Sortable.utils = { ...Sortable.utils, ...plugin.utils };\r\n\r\n            PluginManager.mount(plugin);\r\n        });\r\n    };\n</code></pre>\n<h5>触发插件</h5>\n<p>通过调用pluginEvent来触发插件执行的逻辑</p>\n<pre><code>    pluginEvent(eventName, sortable, evt) {\r\n        this.eventCanceled = false;\r\n        evt.cancel = () => {\r\n            this.eventCanceled = true;\r\n        };\r\n        const eventNameGlobal = eventName + 'Global';\r\n        plugins.forEach(plugin => {\r\n            if (!sortable[plugin.pluginName]) return;\r\n            // Fire global events if it exists in this sortable\r\n            if (\r\n                sortable[plugin.pluginName][eventNameGlobal]\r\n            ) {\r\n                sortable[plugin.pluginName][eventNameGlobal]({ sortable, ...evt });\r\n            }\r\n\r\n            // 触发对应插件上对应eventName的处理函数\r\n            // 比如MultiDrag plugin的drop方法就是通过pluginEvent('drop', this, { evt })触发\r\n            if (\r\n                sortable.options[plugin.pluginName] &#x26;&#x26;\r\n                sortable[plugin.pluginName][eventName]\r\n            ) {\r\n                sortable[plugin.pluginName][eventName]({ sortable, ...evt });\r\n            }\r\n        });\r\n    },\n</code></pre>\n<h4>拖拽能力实现</h4>\n<p>拖拽能力主要实现是:</p>\n<ul>\n<li>初始化绑定根元素拖拽的dom事件监听函数</li>\n<li>根据事件触发顺序添加动画处理逻辑、插件调用逻辑、元素替换逻辑、配置的回调函数触发逻辑等</li>\n</ul>\n<h4>绑定事件监听函数</h4>\n<p>在<a href=\"https://lotabout.me/2018/HTML-5-Drag-and-Drop/\">HTML 5 Drag and Drop 入门教程</a>中有对html5中拖拽函数介绍。</p>\n<pre><code>    // 事件监听\r\n    if (!this.nativeDraggable || touch) {\r\n\t\tif (this.options.supportPointer) {\r\n\t\t\ton(document, 'pointermove', this._onTouchMove);\r\n\t\t} else if (touch) {\r\n\t\t\ton(document, 'touchmove', this._onTouchMove);\r\n\t\t} else {\r\n\t\t\ton(document, 'mousemove', this._onTouchMove);\r\n\t\t}\r\n\t} else {\r\n        // 注意这里传入的是this\r\n\t\ton(dragEl, 'dragend', this);\r\n\t\ton(rootEl, 'dragstart', this._onDragStart);\r\n\t}\n</code></pre>\n<h4>事件触发</h4>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\">addEventListener</a>的第二个参数listener可以是一个函数或者是一个带handleEvent函数的对象。在绑定监听函数的时候listener传入的是this,在触发回调的时候就会走入到handleEvent处理拖拽结束的函数逻辑</p>\n<pre><code>    handleEvent: function (/**Event*/evt) {\r\n        switch (evt.type) {\r\n            case 'drop':\r\n            case 'dragend':\r\n                // 拖拽结束的时候 执行逻辑\r\n                this._onDrop(evt);\r\n                break;\r\n\r\n            case 'dragenter':\r\n            case 'dragover':\r\n                if (dragEl) {\r\n                    this._onDragOver(evt);\r\n                    _globalDragOver(evt);\r\n                }\r\n                break;\r\n\r\n            case 'selectstart':\r\n                evt.preventDefault();\r\n                break;\r\n        }\r\n    },\n</code></pre>","frontmatter":{"date":"2022-10-08","path":"/2022-10-1","title":"2022-10-1-前端快报"}}},"pageContext":{"readingTime":"7 min read"}},
    "staticQueryHashes": []}