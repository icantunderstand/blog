{"componentChunkName":"component---src-templates-post-js","path":"/jsbridge","result":{"data":{"markdownRemark":{"html":"<p>Hybrid混合开发相对于单一的客户端开发有着开发周期短，迭代快的优势，但是Hybrid模式开发的页面存在着一定的缺陷，比如性能问题、缺乏客户端能力等。通过JSBridge这个桥梁可以实现客户端能力的打通，赋予了Hybrid应用更强的端能力。\n<img src=\"./crossPlatformStatic/jsBridge/JSBridge.png\" alt=\"JS\"><br>\nJSBridge作为客户端和H5的通信的桥梁，可以承接如下的能力:</p>\n<ul>\n<li>鉴权能力 JSBridge调用能力鉴权，白名单，黑名单等</li>\n<li>胶水能力 JSBridge兼容代码，做版本控制等调用透明</li>\n<li>测试能力 提供测试方法，方便测试</li>\n<li>Scope(配置)能力 能基于配置产出精简版、目标版本JSBridge</li>\n</ul>\n<p>下面以Android代码为例，介绍JSBridge的实现方式。</p>\n<h2>Js调用Native</h2>\n<p>Js调用Native通常有如下的方案:</p>\n<ul>\n<li>拦截请求(shouldOverrideUrlLoading/shouldInterceptRequest)</li>\n<li>拦截特定方法(prompt/alert/confirm)</li>\n<li>客户端注入JSBridge(addJavascriptInterface)</li>\n</ul>\n<h3>拦截请求</h3>\n<p>在安卓初始化Wevview的时候可以设定WebViewClient，WebViewClient主要功能是处理Webview加载时的通知和请求事件等。通过重写WebViewClient的shouldOverrideUrlLoading/shouldInterceptRequest就可以实现拦截h5的请求从而实现端能力调用。\n实现思路如下:</p>\n<ul>\n<li>定义JSBridge实现Jsb方法</li>\n<li>定义JSBManager管理Jsb的调用</li>\n<li>实现拦截方法的重写</li>\n<li>H5侧调用</li>\n</ul>\n<h4>定义JSBridge方法类</h4>\n<pre><code>// 以下例子均省略import语句 \npublic class JSBridge {\n  // 需要考虑callback和入参一致性问题\n  public void showToast(JSONObject jsonObject) {\n      try {\n          Toast.makeText(MainActivity.context, jsonObject.getString(\"content\"), Toast.LENGTH_LONG).show();\n      } catch(Exception e) {\n      }\n  }\n}\n</code></pre>\n<h4>定义JSBManager管理Jsb的调用</h4>\n<pre><code>public class JsbManager {\n  // 通过HashMap获取JSBridge定义的所有方法\n  public static Map&#x3C;String, Method> methodMap = new HashMap&#x3C;>();\n  public void init() {\n      Method[] methods = JSBridge.class.getDeclaredMethods();\n      for(Method method : methods) {\n          methodMap.put(method.getName(), method);\n      }\n  }\n}\n</code></pre>\n<h4>实现拦截方法的重写</h4>\n<p>以下以shouldOverrideUrlLoading方法的重写为例子。在例子中定义的通信协议是myjsb://method?params。通过在拦截方法中对请求进行解析就可以实现调用对应客户端method的逻辑。</p>\n<pre><code>public class CustomWebViewClient extends WebViewClient {\n    private JsbManager jsbManager = new JsbManager();\n    private JSBridge jsBridge = new JSBridge();\n    public void initJsb() {\n        // 初始jsbManager和jsBridge实例\n        jsbManager.init();\n        jsBridge = new JSBridge();\n    }\n    @Override\n    public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\n        // 处理jsb 协议情况  只拦截jsb协议的url 其他放行\n        Uri uri = request.getUrl();\n        String scheme = uri.getScheme();\n        if(scheme.equals(new String(\"myjsb\"))) {\n            // 获取方法名 入参\n            String methodName = uri.getAuthority();\n            String query = uri.getQuery();\n            try {\n                JSONObject jsonObject = new JSONObject(query);\n                Method method = jsbManager.methodMap.get(methodName);\n                // 调用对应的客户端逻辑\n                method.invoke(jsBridge,jsonObject);\n            } catch(Exception e) {\n                e.printStackTrace();\n            }\n        }\n        return super.shouldOverrideUrlLoading(view, request);\n    }\n}\n// 主活动代码逻辑\npublic class MainActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        // 创建WebViewClient\n        CustomWebViewClient webViewClient = new CustomWebViewClient();\n        // 调用JSBridge初始逻辑\n        webViewClient.initJsb();\n        WebView webView = (WebView) findViewById(R.id.webView);\n        // 设置WebViewClient处理webviewt通知，请求等\n        webView.setWebViewClient(webViewClient);\n        // 开启调试功能\n        webView.setWebContentsDebuggingEnabled(true);\n        WebSettings webSettings = webView.getSettings();\n        // 允许执行JS\n        webSettings.setJavaScriptEnabled(true);\n        // 这里加载项目本地的html文件方便调试\n        webView.loadUrl(\"file:///android_asset/index.html\");\n    }\n}\n</code></pre>\n<h4>H5侧调用</h4>\n<pre><code>    &#x3C;body>\n        &#x3C;div>this page test JSB&#x3C;/div>\n        &#x3C;script>\n          // 通过创建iframe发起JSBridge调用\n          function iframeCall(url) {\n            let iframe = document.createElement('iframe')\n            iframe.src = url\n            iframe.style.display = 'none'\n            document.documentElement.appendChild(iframe)\n            setTimeout(() => { document.documentElement.removeChild(iframe) })\n          }\n          function callJsb(method, params) {\n            let url = `myjsb://`\n            if(!method) {\n              return\n            }\n            url += `${method}`\n            if(!!params) {\n              url += `?${encodeURIComponent(JSON.stringify(params))}`\n            }\n            iframeCall(url)\n          }\n          callJsb('showToast', { content: 'xiaohong' })\n        &#x3C;/script>\n    &#x3C;/body>\n</code></pre>\n<p><img src=\"./crossPlatformStatic/jsBridge/overrideUrlCall.png\" alt=\"拦截请求实现调用\"></p>\n<p>使用iframe发送消息的方式会存在消息丢失，参数限制等问题，可以通过消息队列和拦截shouldInterceptRequest方法来实现。</p>\n<h3>拦截特定方法</h3>\n<p>在初始化WebView的时候可以同步设置WebChromeClient，WebChromeClient主要是辅助WebView处理Js对话框，标题等操作，通过拦截WebChromeClient相应的方法同样可以实现调用端能力。</p>\n<h4>实现WebChromeClient</h4>\n<pre><code>public class CustomWebChromeClient extends WebChromeClient {\n    @Override\n    public boolean onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result) {\n        // 此处举例为主 直接弹端toast\n        // 实现上跟拦截url一致\n        Log.d(\"mesage\", message.startsWith(\"myjsb\")+ \"\");\n        if(message.startsWith(\"myjsb\")) {\n            Toast.makeText(MainActivity.context, \"PropmtCall\", Toast.LENGTH_LONG).show();\n            // 此时js调起了 需要JsPromptResult.confirm(result)\n            return true;\n        } else {\n            return super.onJsPrompt(view, url, message, defaultValue, result);\n        }\n    }\n}\n// 在初始化WebView的时候设置WebChromeClient\nCustomWebChromeClient webChromeClient = new CustomWebChromeClient();\nwebView.setWebChromeClient(webChromeClient);\n</code></pre>\n<h4>H5调用</h4>\n<pre><code>    window.prompt('myjsb://')\n</code></pre>\n<p><img src=\"./crossPlatformStatic/jsBridge/overridePrompt.png\" alt=\"重写Prompt方法调用\"></p>\n<h3>客户端注入JSBridge</h3>\n<p>通过<a href=\"https://developer.android.com/reference/android/webkit/WebView#addJavascriptInterface(java.lang.Object,%20java.lang.String)\">addJavascriptInterface</a>可以在初始化WebView的时候将客户端的调用逻辑暴露给H5。</p>\n<h4>实现JSInterface</h4>\n<pre><code>    public class JsInterface {\n        private Context context;\n        public JsInterface(Context context) {\n            this.context = context;\n        }\n        // JsInterface需要用@JavascriptInterface注解才可以被调用\n        @JavascriptInterface\n        public void showToast(String content) {\n            Toast.makeText(this.context, content, Toast.LENGTH_LONG).show();\n        }\n    }\n\n    // 在初始WebView的时候注入interface\n    webView.addJavascriptInterface(new JsInterface(context), \"myjsb\");\n</code></pre>\n<h4>H5调用</h4>\n<pre><code>    window.myjsb.showToast(\"Interface\")  \n</code></pre>\n<p><img src=\"./crossPlatformStatic/jsBridge/callInterface.png\" alt=\"interface调用\"></p>\n<h2>Native调用Js</h2>\n<p>Nativa调用Js通常有如下的方案:</p>\n<ul>\n<li><a href=\"https://developer.android.com/reference/android/webkit/WebView#loadUrl(java.lang.String)\">loadUrl</a></li>\n<li><a href=\"https://developer.android.com/reference/android/webkit/WebView#evaluateJavascript(java.lang.String,%20android.webkit.ValueCallback%3Cjava.lang.String%3E)\">evaluateJavascript</a></li>\n</ul>\n<p>以下例子在H5中都定义了全局函数供Native调用</p>\n<pre><code>    function testNativeCall() {\n      console.log(\"nativeCallJs\")\n      return 'nativeCallJs'\n    }\n</code></pre>\n<h3><a href=\"https://developer.android.com/reference/android/webkit/WebView#loadUrl(java.lang.String)\">loadUrl</a></h3>\n<p>可以通过webView.loadUrl(\"javascript: testNativeCall()\")发起调用(需要等待Js执行完成)。loadUrl的方式会刷新页面且无法获取js的回调。</p>\n<h3><a href=\"https://developer.android.com/reference/android/webkit/WebView#evaluateJavascript(java.lang.String,%20android.webkit.ValueCallback%3Cjava.lang.String%3E)\">evaluateJavascript</a></h3>\n<pre><code>webView.evaluateJavascript(\"javascript: testNativeCall()\", new ValueCallback&#x3C;String>() {\n    @Override\n    public void onReceiveValue(String value) {\n        return;\n    }\n});\n</code></pre>\n<p><img src=\"./crossPlatformStatic/jsBridge/evaluateJS.png\" alt=\"evaluate调用js\"></p>\n<h2>参考</h2>\n<p><a href=\"https://www.zoo.team/article/jsbridge\">小白必看，JSBridge 初探</a>\n<a href=\"https://juejin.cn/post/6844903840588759048\">跨端技能必备之JSBridge</a>\n<a href=\"https://juejin.cn/post/6844903856418062350\">从零开始写一个 JSBridge</a></p>","frontmatter":{"date":"2021-07-07","path":"/jsbridge","title":"Hybrid开发-JSBridge原理"}}},"pageContext":{"readingTime":"7 min read"}},"staticQueryHashes":[]}