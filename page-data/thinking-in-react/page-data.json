{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/thinking-in-react",
    "result": {"data":{"markdownRemark":{"html":"<p>在之前的文章<a href=\"https://icantunderstand.github.io/blog/react-hooks\">React Hooks源码解读</a>中有对React hooks的实现原理进行分析，本文主要结合React hooks的发展过程聊下对hooks的理解。hooks的提出主要解决了以下的问题:</p>\n<ul>\n<li>为react带来通用的代码逻辑复用的方式。相对于render props/高阶组件(HOC)等，hooks在代码复杂度上都有一定降低。声明式的hooks使用方式也符合函数式编程的思想。</li>\n<li>解决类组件生命周期函数复杂度和在新的react架构中的一些问题</li>\n<li>规范react使用范式，通过hooks的接口能更好的组织组件与组件/组件与渲染的原生DOM/组件与外部依赖之间的关系</li>\n</ul>\n<h2>通用的代码复用方式</h2>\n<p>react中可以通过render props/高阶组件(HOC)实现代码的能力的复用(组合)。</p>\n<pre><code>// render props通过传入渲染函数的方式复用逻辑\nclass Cat extends PureComponent {\n    constructor(props) {\n        super(props)\n        this.state = { name: 111 }\n        // 可复用的逻辑\n    }\n    render() {\n        // 通过调用渲染函数的方式实现共享\n        return this.props.render(this.state)\n    }\n}\nclass App extends Component {\n    render() {\n        return (\n            &#x3C;Cat render={params => (&#x3C;div>{params.name}&#x3C;/div>)} />\n        )\n    }\n}\n// 高阶组件\nfunction HOC(WrappedComponent) {\n  return class extends Component {\n    componentDidMount() {\n      // 通用的业务逻辑\n    }\n    render() {\n      return (&#x3C;WrappedComponent {...this.props} />)\n    }\n  }\n}\n</code></pre>\n<p>从render props和高阶组件的实现方式上看，两者都引入了新的组件结构来实现复用，增加了理解成本从而导致一些问题。笔者在最开始对高阶组件不熟悉的时候就遇到过一次bug。包裹的高阶组件没有将外层传递的属性透传给被包裹的组件从而导致子组件渲染异常。<br>\nhooks通过函数声明式的方式实现代码复用，理解上更符合可见可得的思想，减少了理解成本。</p>\n<h2>解决老的问题</h2>\n<p>类组件的生命周期问题导致代码逻辑的分离，比如事件的监听与解绑</p>\n<pre><code>// 类组件示例\nclass Test extends Component {\n    componentDidMount() {\n        // 监听\n        document.addEventListener()\n    }\n    componentWillUnmount() {\n        // 解绑\n        document.removeEventListener()\n    }\n    render() {}\n}\n// 函数式组件示例\nfunction Test(props) {\n    useEffect(() => {\n        // 监听\n        document.addEventListener()\n        return () => {\n            // 解绑\n            document.removeEventListener()\n        }\n    }, [])\n    return xxx;\n}\n</code></pre>\n<p>在Concurrent Mode中会导致生命周期函数的多次执行，hooks的提出在结构上是与Fiber结构绑定的，服务于新的架构的</p>\n<h2>规范使用范式</h2>\n<p>react开发者都需要用一些库(redux等)来组合应用，react通过hooks为react增加了状态管理、操作DOM的入口、父子组件调用方式等，丰富且规范了React开发者的开发模式。通过这种规范可以让React更好的与社区结合，比如相关的库<a href=\"https://github.com/facebookexperimental/Recoil\">Recoil</a>、<a href=\"https://github.com/streamich/react-use\">react-use</a>。</p>\n<h2>hooks使用注意</h2>\n<ul>\n<li>避免hooks依赖，比如useMemo/useCallback等是否需要使用。使用多个useState的时候是否引入其他的管理库来解</li>\n<li>UI逻辑与业务逻辑合理拆分。hooks做过多的业务逻辑会导致业务逻辑不明晰，需要进行适当的拆分。</li>\n<li>hooks的依赖问题会导致业务中存在隐藏逻辑，需要控制代码中隐藏逻辑和隐藏逻辑的依赖问题</li>\n<li>hooks更适合组件级别的代码复用和逻辑,跨组件逻辑需要仔细设计(比如是否需要useRef)</li>\n</ul>","frontmatter":{"date":"2022-11-16","path":"/thinking-in-react","title":"聊聊我对React Hooks的理解"}}},"pageContext":{"readingTime":"5 min read"}},
    "staticQueryHashes": []}