{
    "componentChunkName": "component---src-templates-index-js",
    "path": "/5",
    "result": {"pageContext":{"pageAllCount":94,"group":[{"node":{"id":"397dff62-95c9-527b-a1bb-bcd9b51c1901","html":"<p>在之前的文章<a href=\"https://icantunderstand.github.io/blog/react-hooks\">React Hooks源码解读</a>中有对React hooks的实现原理进行分析，本文主要结合React hooks的发展过程聊下对hooks的理解。hooks的提出主要解决了以下的问题:</p>\n<ul>\n<li>为react带来通用的代码逻辑复用的方式。相对于render props/高阶组件(HOC)等，hooks在代码复杂度上都有一定降低。声明式的hooks使用方式也符合函数式编程的思想。</li>\n<li>解决类组件生命周期函数复杂度和在新的react架构中的一些问题</li>\n<li>规范react使用范式，通过hooks的接口能更好的组织组件与组件/组件与渲染的原生DOM/组件与外部依赖之间的关系</li>\n</ul>\n<h2>通用的代码复用方式</h2>\n<p>react中可以通过render props/高阶组件(HOC)实现代码的能力的复用(组合)。</p>\n<pre><code>// render props通过传入渲染函数的方式复用逻辑\nclass Cat extends PureComponent {\n    constructor(props) {\n        super(props)\n        this.state = { name: 111 }\n        // 可复用的逻辑\n    }\n    render() {\n        // 通过调用渲染函数的方式实现共享\n        return this.props.render(this.state)\n    }\n}\nclass App extends Component {\n    render() {\n        return (\n            &#x3C;Cat render={params => (&#x3C;div>{params.name}&#x3C;/div>)} />\n        )\n    }\n}\n// 高阶组件\nfunction HOC(WrappedComponent) {\n  return class extends Component {\n    componentDidMount() {\n      // 通用的业务逻辑\n    }\n    render() {\n      return (&#x3C;WrappedComponent {...this.props} />)\n    }\n  }\n}\n</code></pre>\n<p>从render props和高阶组件的实现方式上看，两者都引入了新的组件结构来实现复用，增加了理解成本从而导致一些问题。笔者在最开始对高阶组件不熟悉的时候就遇到过一次bug。包裹的高阶组件没有将外层传递的属性透传给被包裹的组件从而导致子组件渲染异常。<br>\nhooks通过函数声明式的方式实现代码复用，理解上更符合可见可得的思想，减少了理解成本。</p>\n<h2>解决老的问题</h2>\n<p>类组件的生命周期问题导致代码逻辑的分离，比如事件的监听与解绑</p>\n<pre><code>// 类组件示例\nclass Test extends Component {\n    componentDidMount() {\n        // 监听\n        document.addEventListener()\n    }\n    componentWillUnmount() {\n        // 解绑\n        document.removeEventListener()\n    }\n    render() {}\n}\n// 函数式组件示例\nfunction Test(props) {\n    useEffect(() => {\n        // 监听\n        document.addEventListener()\n        return () => {\n            // 解绑\n            document.removeEventListener()\n        }\n    }, [])\n    return xxx;\n}\n</code></pre>\n<p>在Concurrent Mode中会导致生命周期函数的多次执行，hooks的提出在结构上是与Fiber结构绑定的，服务于新的架构的</p>\n<h2>规范使用范式</h2>\n<p>react开发者都需要用一些库(redux等)来组合应用，react通过hooks为react增加了状态管理、操作DOM的入口、父子组件调用方式等，丰富且规范了React开发者的开发模式。通过这种规范可以让React更好的与社区结合，比如相关的库<a href=\"https://github.com/facebookexperimental/Recoil\">Recoil</a>、<a href=\"https://github.com/streamich/react-use\">react-use</a>。</p>\n<h2>hooks使用注意</h2>\n<ul>\n<li>避免hooks依赖，比如useMemo/useCallback等是否需要使用。使用多个useState的时候是否引入其他的管理库来解</li>\n<li>UI逻辑与业务逻辑合理拆分。hooks做过多的业务逻辑会导致业务逻辑不明晰，需要进行适当的拆分。</li>\n<li>hooks的依赖问题会导致业务中存在隐藏逻辑，需要控制代码中隐藏逻辑和隐藏逻辑的依赖问题</li>\n<li>hooks更适合组件级别的代码复用和逻辑,跨组件逻辑需要仔细设计(比如是否需要useRef)</li>\n</ul>","fields":{"readingTime":{"text":"5 min read"}},"frontmatter":{"title":"聊聊我对React Hooks的理解","date":"2022-11-16","tags":"React","path":"/thinking-in-react","top":null,"summary":null}}},{"node":{"id":"5727745d-cc22-558e-b830-2ecc6b9c1e75","html":"<p>这个系列是<a href=\"https://www.patterns.dev/\">Improve how you architect webapps</a>上文章的读书笔记。</p>\n<h2>中介模式</h2>\n<p>中介模式用中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。聊天室就是一个很好的中介模式，用户通过接口与聊天室对接就可以完成跟其他用户的聊天。</p>\n<pre><code>class ChatRoom {\n    // 中介者封装的对象交互逻辑，需要关注对交互逻辑的封装，减少复杂度\n    logMessage(user, message) {\n        const sender = user.getName();\n        console.log(`${new Date().toLocaleString()} [${sender}]: ${message}`);\n    }\n}\nclass User {\n    constructor(name, chatroom) {\n        this.name = name;\n        this.chatroom = chatroom;\n    }\n\n    getName() {\n        return this.name;\n    }\n    // 对象直接与中介对接，不需要感知交互对象的细节(交互细节封装到中介中)\n    send(message) {\n        this.chatroom.logMessage(this, message);\n    }\n}\nconst chatroom = new ChatRoom();\nconst user1 = new User(\"John Doe\", chatroom);\nconst user2 = new User(\"Jane Doe\", chatroom);\nuser1.send(\"Hi there!\");\nuser2.send(\"Hey!\");\n</code></pre>\n<p>前端的MVC/MVP/MVVM架构都可以理解是中介模式的一种扩展，中介实现UI与数据的交互逻辑(渲染/绑定等)</p>\n<h2>享元模式</h2>\n<p>享元模式以共享的方式高效的支持大量的细粒度对象，能有效的避免大量相同对象创建的开销。这里以书店的书为例子，书店的书同一本有多本库存，在维护图书库存的时候，就可以通过享元模式利用之前创建的书实例来创建新的书实例。</p>\n<pre><code>// 存储享元模式的Map结构\nconst books = new Map();\nconst createBook = (title, author, isbn) => {\n    const existingBook = books.has(isbn);\n    if (existingBook) {\n        // 已存在就查找返回\n        return books.get(isbn);\n    }\n    // 不存在新建返回\n    const book = new Book(title, author, isbn);\n    books.set(isbn, book);\n    return book;\n};\n//  存储书的列表\nconst bookList = [];\nconst addBook = (title, author, isbn, availability, sales) => {\n    const book = {\n        // 利用之前的共享对象创建新的实力\n        ...createBook(title, author, isbn),\n        sales,\n        availability,\n        isbn\n    };\n    bookList.push(book);\n    return book;\n};\n</code></pre>\n<h3>享元模式跟单例模式的区别</h3>\n<ul>\n<li>单例模式确保某个类只有一个实例并且这个实例是全局访问的。单例模式是对象创建型模式</li>\n<li>享元模式中一个类可以创建多个对象，对象可以被多处代码引用共享</li>\n</ul>\n<h2>指令模式</h2>\n<p>指令模式是一种行为型模式，通过将处理逻辑封装到命令中传递给调用对象，调用对象负责匹配相应的处理对象并执行指令。指令模式的优点是解耦合，可以方便的在系统中加入新的指令。缺点是容易产生过多的命令类和重复代码。下面以订餐中订单、查询订单、取消订单的例子来解释指令模式。</p>\n<pre><code>    // 指令调用对象 负责为指令匹配需要处理的对象和执行指令\n    class OrderManager {\n        constructor() {\n            // 指令处理的对象\n            this.orders = [];\n        }\n\n        execute(command, ...args) {\n            // 匹配指令和指令处理的对象\n            return command.execute(this.orders, ...args);\n        }\n    }\n    // 指令创建类\n    class Command {\n        constructor(execute) {\n            this.execute = execute;\n        }\n    }\n    // 生成订单指令 预置了参数以便指令调用对象传入需要处理的对象\n    function PlaceOrderCommand(order, id) {\n        return new Command(orders => {\n            orders.push(id);\n            return `You have successfully ordered ${order} (${id})`;\n        });\n    }\n    const manager = new OrderManager();\n    manager.execute(new PlaceOrderCommand(\"Pad Thai\", \"1234\"));\n</code></pre>","fields":{"readingTime":{"text":"5 min read"}},"frontmatter":{"title":"5分钟速读系列-中介模式/享元模式/指令模式","date":"2022-11-04","tags":"设计模式","path":"/2022-11-mediator","top":null,"summary":null}}},{"node":{"id":"794a572a-6aaf-51cf-854b-bb0077d6f89b","html":"<p>这个系列是<a href=\"https://www.patterns.dev/\">Improve how you architect webapps</a>上文章的读书笔记。</p>\n<h2>观察者模式</h2>\n<p>观察者模式(发布订阅模式)是定义对象间一种一对多的依赖关系，使得当每一个被观察方改变状态，则所有依赖于它的观察者都会得到通知并自动更新。</p>\n<pre><code>// 被观察者提供观察者通知逻辑、订阅逻辑\nclass Observable {\n    constructor() {\n        this.observers = [];\n    }\n    // 观察者订阅入口\n    subscribe(func) {\n        this.observers.push(func);\n    }\n\n    unsubscribe(func) {\n        this.observers = this.observers.filter(observer => observer !== func);\n    }\n    // 通知观察者\n    notify(data) {\n        this.observers.forEach(observer => observer(data));\n    }\n}\nfunction logger(data) {\n    console.log(data)\n}\nconst observable = new Observable() \n// 订阅操作\nobservable.subscribe(logger);\n// 通知操作\nobservable.notify('this is a test!')\n</code></pre>\n<p>观察者模式的优点是可以做到逻辑的分离，做到单一职责。缺点是当观察者数目较多的时候会有性能的问题</p>\n<h2>Mixin模式</h2>\n<p>Mixin模式可以在不通过继承的方式实现为类(对象)增加复用的能力。当你需要将一个特定的feature添加到不同的类或者为类提供可插拔能力的时候可以考虑Mixin模式。</p>\n<pre><code>// 基础类 只有name能力\nclass Dog {\n    constructor(name) {\n        this.name = name;\n    }\n}\n// mixin方法 可以为基础类提供复用的能力\nconst dogFunctionality = {\n    bark: () => console.log(\"Woof!\"),\n    wagTail: () => console.log(\"Wagging my tail!\"),\n    play: () => console.log(\"Playing!\")\n};\n// 通过方法的拷贝 在Dog的原型上就有了对象的方法\nObject.assign(Dog.prototype, dogFunctionality);\nconst pet1 = new Dog(\"Daisy\");\npet1.bark(); // Woof!\n</code></pre>\n<p>可以在mixin函数中通过指定__proto__实现mixin的继承能力</p>\n<pre><code>const sayMixin = {\n    say(phrase) {\n        alert(phrase);\n    }\n};\nconst sayHiMixin = {\n    // 设置原型 实现mixin的继承\n    __proto__: sayMixin, // (可以在这儿使用 Object.setPrototypeOf 来设置原型)\n    sayHi() {\n        // 调用父类方法\n        super.say(`Hello ${this.name}`); // (*)\n    },\n    sayBye() {\n        super.say(`Bye ${this.name}`); // (*)\n    }\n};\nclass User {\n    constructor(name) {\n        this.name = name;\n    }\n}\n// 拷贝方法\nObject.assign(User.prototype, sayHiMixin);\n\n// 现在 User 可以打招呼了\nnew User(\"Dude\").sayHi(); // Hello Dude!\n</code></pre>\n<p>mixin模式会存在覆盖功能和增加项目代码复杂度的问题</p>","fields":{"readingTime":{"text":"3 min read"}},"frontmatter":{"title":"5分钟速读系列-观察者模式/Mixin模式","date":"2022-11-03","tags":"设计模式","path":"/2022-11-observable","top":null,"summary":null}}},{"node":{"id":"316e9ae9-368f-5e9a-993e-05e97265fb24","html":"<p>这个系列是<a href=\"https://www.patterns.dev/\">Improve how you architect webapps</a>上文章的读书笔记。</p>\n<h2>提供者模式</h2>\n<p>提供者模式通过封装方法给予应用订阅不同数据源的能力。react中通过外层的Provider来提供全局的store，在组件内部通过useContext来获取相关的Context值。</p>\n<pre><code>    // 根组件通过Provider的value绑定全局store\n    export const ThemeContext = React.createContext();\n    const themes = {\n        light: {\n            background: \"#fff\",\n            color: \"#000\"\n        },\n        dark: {\n            background: \"#171717\",\n            color: \"#fff\"\n        }\n    };\n    export default function App() {\n        const [theme, setTheme] = useState(\"dark\");\n        function toggleTheme() {\n            setTheme(theme === \"light\" ? \"dark\" : \"light\");\n        }\n        const providerValue = {\n            theme: themes[theme],\n            toggleTheme\n        };\n        return (\n            &#x3C;div className={`App theme-${theme}`}>\n                &#x3C;ThemeContext.Provider value={providerValue}>\n                    &#x3C;Toggle />\n                &#x3C;/ThemeContext.Provider>\n            &#x3C;/div>\n        );\n    }\n    // Toggle组件\n    import React, { useContext } from \"react\";\n    import { ThemeContext } from \"./App\";\n\n    export default function Toggle() {\n        const theme = useContext(ThemeContext);\n        return (\n            &#x3C;label className=\"switch\">\n                &#x3C;input type=\"checkbox\" onClick={theme.toggleTheme} />\n            &#x3C;/label>\n        );\n    }\n</code></pre>\n<p>在React应用中通过全局的context可以解决组件属性的传递问题，便于组件的设计。但是全局Context的更新会导致消费对应Context组件的更新，造成需要不必要的渲染。这里就需要对全局Context进行更细粒度的拆分。</p>\n<h2>原型模式</h2>\n<p>JavaScript通过原型完成对象间属性的共享。通过原型能减少相同属性或者方法的创建，相同类型的实例可以共享实例原型上的属性和方法。对于原型模式需要理解几下的几点:</p>\n<ul>\n<li>\n<p>实例对象的__proto__指向构造函数的prototype(实例与原型的关系).构造函数的prototype的constructor(构造函数与原型的关系).</p>\n<pre><code>  class Dog {\n      constructor(name) {\n          this.name = name;\n      }\n      bark() {\n          return `Woof!`;\n      }\n  }\n  const dog1 = new Dog(\"Daisy\");\n  dog1.__proto__ === Dog.prototype // true\n  Dog.prototype.constructor === Dog // true\n</code></pre>\n</li>\n<li>\n<p>对象属性的获取是顺着对象__proto__沿着原型链查找，会一直查找到Object.prototype(Object.prototype.__proto__是null)</p>\n</li>\n<li>\n<p>理解new关键字中原型的处理方式，new操作符主要做了如下的操作:</p>\n<ol>\n<li>\n<p>以构造器的原型为属性创建新对象</p>\n</li>\n<li>\n<p>将新对象作为this调用构造器</p>\n</li>\n<li>\n<p>如果构造器返回的是对象则返回否则返回第一步创建的对象</p>\n<pre><code> function myNew(Con, ...args) {\n     const obj = Object.create(Con.prototype);\n     const ret = Con.call(obj, args);\n     if(ret instanceof Object &#x26;&#x26; ret !== null) {\n         return ret;\n     }\n     return obj;\n }\n</code></pre>\n</li>\n</ol>\n</li>\n</ul>","fields":{"readingTime":{"text":"3 min read"}},"frontmatter":{"title":"5分钟速读系列-提供者模式/原型模式","date":"2022-11-02","tags":"设计模式","path":"/2022-11-provider","top":null,"summary":null}}},{"node":{"id":"8418a542-013e-52de-bd15-8927e0017b7f","html":"<p>这个系列是<a href=\"https://www.patterns.dev/\">Improve how you architect webapps</a>上文章的读书笔记。</p>\n<h2>单例模式</h2>\n<p>单例模式通过全局维护一个实例的方式来达到全局属性的共享和减少内存的占用。单例的简单实现如下:</p>\n<pre><code>    let instance;\n    let counter = 0;\n    class Counter {\n        constructor() {\n            if (instance) {\n                throw new Error(\"You can only create one instance!\");\n            }\n            instance = this;\n        }\n        getInstance() {\n            return this;\n        }\n        getCount() {\n            return counter;\n        }\n        increment() {\n            return ++counter;\n        }\n        decrement() {\n            return --counter;\n        }\n    }\n    const singletonCounter = Object.freeze(new Counter());\n    // 暴露给外部的单一实例\n    export default singletonCounter;\n</code></pre>\n<p>单例模式的优点也恰恰是他的缺点，由于全局属性的共享导致改动的全局污染问题、测试用例写法问题等。在react中全局的redux\\context store就是应用中的单例，store通过单向的数据流来规避单例的一些问题。</p>\n<h2>Proxy(代理)模式</h2>\n<p>代理模式通过为对象提供占位符来控制对象的访问。代理对象相当于中间人角色，可以在不改变被代理对象的接口的情况下扩展功能。在JavaScript中可以使用Proxy来实现代理的功能。</p>\n<pre><code>    const person = {\n        name: \"John Doe\",\n        age: 42,\n        nationality: \"American\"\n    };\n    const personProxy = new Proxy(person, {\n        // handler的get/set方法代理了被代理对象属性的访问方法\n        get: (obj, prop) => {\n            console.log(`The value of ${prop} is ${obj[prop]}`);\n            // 可以用Reflect修改代理对象的属性\n            Reflect.set(obj, prop);\n        },\n        set: (obj, prop, value) => {\n            console.log(`Changed ${prop} from ${obj[prop]} to ${value}`);\n            obj[prop] = value;\n            return true;\n        }\n    });\n    personProxy.name;\n    personProxy.age = 43;\n</code></pre>","fields":{"readingTime":{"text":"2 min read"}},"frontmatter":{"title":"5分钟速读系列-单例模式/代理模式","date":"2022-11-01","tags":"设计模式","path":"/2022-11-singleton","top":null,"summary":null}}},{"node":{"id":"4cf57e5c-235a-5434-99e0-3ff79238a9aa","html":"<p>偶然间想起2021竟然没有过来总结，恍然间发现时间过的好快。这次提前来总结下，希望年终总结能成为每年的一个思考和沉淀的习惯。</p>\n<h2>工作</h2>\n<p>近两年经历了两次工作的变动，从字节离开 => 短暂的教育行业经历(3个月) => 现在的公司(也经历过一次内部的部门调整)。仔细回想自己应该有半年多的迷茫期或者比较空闲的状态，那段时间感觉十分地缺少自信，也是循环播放Unstoppable的一段时间。</p>\n<ul>\n<li>从字节离开的时候，leader有对工作去向和内心的想法疏解，记忆最深的一句话就是不要跟系统内改变不了的东西对抗，比如架构调整之类. 现在再回头看当时自己的确没有想明白当时的问题或者自己想要什么。在离开字节之前没有好好跟合作的伙伴都打个招呼，现在想起来很不成熟。总是觉得要走就要一个人偷摸的走。如果有机会可以改之前飞书的签名，我会写: 有缘再见，不如加个V 哈哈。</li>\n<li>短暂的教育行业经历略过</li>\n<li>在当前的公司经历过一次内部的调整，有过一小段时间的“空闲”。这段时间想明白了一件事就是要让自己的状态跟环境匹配，从小事中逐步的找到做事的状态，甚至整理xlsx表格这种小事也相当认真。自己在这段\"空闲\"的时候做了一个组内前端报警的工具，自己从想法到功能设计完善了整个工具的功能，是这段时间比较有意思的事情。</li>\n</ul>\n<h3>技术能力</h3>\n<ol>\n<li>回归到B端业务的开发 自己从B端到C端又回到了B端感觉经历了一个圈。想起之前面试字节面试官问我B端业务和C端业务的区别是啥。我当时很懵(没有准备/思考过这个问题)，现在在重新尝试回答下这个问题，有可能还是比较浅显的认知，后续有新的认知在回来check</li>\n</ol>\n<ul>\n<li>面向的用户不同， 决定着同一个业务形式的在B端和C端是两套不同的技术架构和业务发展模式。在进行技术储备和规划上就需要做更多的考虑。比如广告业务，在C端侧业务是如何将广告与人结合，转化。从产品上会考虑如何原生化、样式多样性、结合转化流程的简单性、趣味性、品牌价值(平台如何给广告主带来价值)、平台价值等，业务形态上流程短、迭代节奏快。在B端上就需要为C端的业务提供完成的配套流程，业务形态上要简单好用（减轻用户的理解成本/操作成本）、功能完善等。</li>\n<li>业务形态决定技术方案的选择思考点不同。C端薄的业务可以快速的试错。新技术方案的尝试(跨端)或者欠考虑的技术实现后期都有比较大的空间可以进行业务迭代。B端由于系统是一以贯之的，需要前期相对于C端业务要更加充分的进行技术方案的对比，当然在B端和C端都会产生技术债问题。</li>\n<li>B端和C端是可以进行良性互补。比如广告中的建站平台，就是客户侧对快，开发对效率有要求才产生的平台。</li>\n</ul>\n<ol start=\"2\">\n<li><a href=\"https://icantunderstand.github.io/blog/%E5%89%8D%E7%AB%AF%E5%BF%AB%E6%8A%A5/\">前端快报</a> 月维度收录一些阅读的比较好的前端文章，算是对自己的一个督促。仔细考虑这一年对技术方面的学习是落后的。</li>\n</ol>\n<h3>工作心态</h3>\n<p>工作上慢慢的变的不那么急躁。从最开始的被UI支配的控制到现在改UI的时候心态很相对平静(改UI真的容易心态炸裂)。学会注意到工作中双方的认知差异。比如在UI实现上设计师是领域专家，那在实现上基于成本的考虑就可以以设计师的想法为主。</p>\n<h2>生活</h2>\n<h3>读书</h3>\n<p>在2020的年终总结上说要多读书，今年才开始系统的读书了<a href=\"https://icantunderstand.github.io/blog/book-list-2022\">读书目录2022</a>。有一次突然觉得好多事好像还看不懂，不明白，就不管三七二十一的读起来了。希望能一直读下去。</p>\n<h3>投资</h3>\n<p>尝试进行投资理财。发现只有上交到家庭的固定工资部分是真的“理财”，其他都是负理财。后续规划上会进行一些系统知识的学习。</p>\n<h3>家庭</h3>\n<p>貌似懂得了陪伴，但是这些方面做的还远不够。国庆老妈来北京逛了一圈。我作为一个在北京10多年的老北漂家人第一次来北京溜达实属惭愧。</p>\n<h2>思考</h2>\n<p>转眼已经30出了个小头了。距离不惑虽然还有些年龄的距离，但是距离不惑的状态还是有些差距。有好多事还没想明白，有好多事甚至都没曾想过。不过一个简单的想法就是要注重自己的价值和心理状态。持续的读书是想保证内心的富足。这个博客也希望能坚持下去，后续会做其他别的分享带来其他的价值</p>\n<h2>番外</h2>\n<p>写到中间的时候，发现<a href=\"https://mp.weixin.qq.com/s?__biz=MzUwOTk5NDI3OA==&#x26;mid=2247484174&#x26;idx=1&#x26;sn=123f7a9b633c3c786519e24f3f4b0072&#x26;chksm=f908f747ce7f7e51785450e91d9aa8c68f411f63935b162d9f19b4fea1cb9184ef10b30f3e7f#rd\">2021的流水账</a>记录在微信的公众号上了，这个博客没有同步。看了下比上次或许有一点进步就算是安慰了。</p>","fields":{"readingTime":{"text":"8 min read"}},"frontmatter":{"title":"2022年终总结","date":"2022-10-20","tags":"年度总结","path":"/2022-summary","top":null,"summary":"2022年总结-回顾了工作、生活和自身的一些思考"}}}],"pathPrefix":"","first":false,"last":false,"index":5,"pageCount":16,"additionalContext":{"pageAllCount":94}}},
    "staticQueryHashes": []}