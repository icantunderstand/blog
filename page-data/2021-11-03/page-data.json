{"componentChunkName":"component---src-templates-post-js","path":"/2021-11-03","result":{"data":{"markdownRemark":{"html":"<h3>基础知识</h3>\n<h2><a href=\"https://jakearchibald.com/2021/cors/\">How to win at CORS</a></h2>\n<p>CROS看这篇就够了</p>\n<h2>React Native相关</h2>\n<p><a href=\"https://formidable.com/blog/2019/react-codegen-part-1/\">The New React Native Architecture Explained</a>这个系列文章介绍了React Native架构升级的一些核心概念，包括Turbo Modules,Fabric, JSI等，可以快速的了解架构升级背后的原理。可以结合<a href=\"https://www.cnblogs.com/ludashi/p/15381067.html\">React Native之新架构中的Turbo Module实现原理分析</a>来深入到原理部分。</p>\n<h2>项目管理&#x26;设计</h2>\n<h3><a href=\"https://blog.codinghorror.com/falling-into-the-pit-of-success/\">Falling Into The Pit of Success</a></h3>\n<p>一篇关于系统设计的文章，在进行系统设计的时候我们要思考在使用系统的时候如何让用户获得使用上的收益而不是通过一些手段去弥补系统的漏洞</p>\n<h3><a href=\"https://yonigoldberg.medium.com/fighting-javascript-tests-complexity-with-the-basic-principles-87b7622eac9a\">Writing clean JavaScript tests with the BASIC principles</a></h3>\n<p>在业务开发中，会因为业务的压力导致单测执行粒度不够，KPI式的单测覆盖率目标并不能保证有效的单测。比如前端做单测，在哪些维度做单测的尝试是值得考虑的(基础组件，核心api处理逻辑等)，这边文章讨论了单测执行过程中的一些问题并且给出了如何写单测的原则建议，很有意义。在附一个<a href=\"https://www.zhihu.com/question/27081528/answer/1872155062\">知乎关于单测的讨论</a></p>\n<h3><a href=\"https://mp.weixin.qq.com/s/g5ZjQt9F1UUryisEW1csSA\">这可能是大型复杂项目下数据流的最佳实践</a></h3>\n<p>这篇是关于项目治理的文档，数据流的设计与拆分，领域模块的隔离都有借鉴意义值得学习。项目的治理要早否则根深蒂固就积重难返了。</p>\n<h2>React</h2>\n<h3>hooks实践</h3>\n<p><a href=\"https://devtrium.com/posts/react-typescript-how-to-type-hooks\">React &#x26; TypeScript: how to type hooks (a complete guide)</a><br>\n<a href=\"https://thoughtspile.github.io/2021/10/18/non-react-state/\">How to replace useState with useRef and be a winner</a></p>\n<h3><a href=\"https://www.zhihu.com/question/468249924/answer/1968728853\">知乎上关于hooks的讨论</a></h3>\n<p>其中beeplin的回答有很多借鉴意义，思考到项目的设计问题</p>","frontmatter":{"date":"2021-11-03","path":"/2021-11-03","title":"2021-11-1-前端快报"}}},"pageContext":{"readingTime":"3 min read"}},"staticQueryHashes":[]}