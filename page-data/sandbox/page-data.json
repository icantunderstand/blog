{"componentChunkName":"component---src-templates-post-js","path":"/sandbox","result":{"data":{"markdownRemark":{"html":"<!-- vscode-markdown-toc -->\n<ul>\n<li>\n<ol>\n<li><a href=\"#\">前置概念</a></li>\n</ol>\n<ul>\n<li>1.1. <a href=\"#-1\">沙盒</a></li>\n<li>1.2. <a href=\"#Proxy\">Proxy</a></li>\n<li>1.3. <a href=\"#with\">with</a></li>\n</ul>\n</li>\n<li>\n<ol start=\"2\">\n<li><a href=\"#-1\">沙盒的实现方式</a></li>\n</ol>\n<ul>\n<li>2.1. <a href=\"#ProxySandbox\">ProxySandbox(单实例沙盒)</a></li>\n<li>2.2. <a href=\"#snapshotSandbox\">snapshotSandbox(单实例沙盒)</a></li>\n<li>2.3. <a href=\"#-1\">多实例沙盒</a></li>\n</ul>\n</li>\n<li>\n<ol start=\"3\">\n<li><a href=\"#-1\">附录</a></li>\n</ol>\n</li>\n</ul>\n<!-- vscode-markdown-toc-config\n\tnumbering=true\n\tautoSave=true\n\t/vscode-markdown-toc-config -->\n<!-- /vscode-markdown-toc -->\n<p>不同的微前端框架会提供沙盒环境来实现不同微前端应用的隔离.本文梳理JavaScript中沙盒的实现方式，有助于学习微前端方案的技术细节.</p>\n<h2>1. <a name=''></a>前置概念</h2>\n<h3>1.1. <a name='-1'></a>沙盒</h3>\n<p>沙盒是一种安全机制可以为程序提供隔离的执行环境，沙盒中提供用后即回收的磁盘及内存空间，在沙盒中对网络访问、对真实系统的访问、对输入设备的读取通常被禁止或是被严格限制的.JavaScript沙盒是通过语法层面的限制来实现代码执行的隔离.</p>\n<h3>1.2. <a name='Proxy'></a>Proxy</h3>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a>可以实现对对象属性访问的代理，通过Proxy的使用可以实现JavaScript代码执行的沙盒模式</p>\n<h3>1.3. <a name='with'></a>with</h3>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/with\">with</a>语句可以扩展当前的执行上下文</p>\n<pre><code>const a = { name: 1111 }\nwith(a) {\n    console.log(name) // 1111\n}\n</code></pre>\n<h2>2. <a name='-1'></a>沙盒的实现方式</h2>\n<p>沙盒的实现方式上主要分为:</p>\n<ul>\n<li>单实例沙盒: 同一个时刻只有一个微应用实例存在，当前资源被这个应用独占，需要解决的主要问题是应用切换的时候变量污染清理和再次启动时的变量恢复</li>\n<li>多实例沙盒: 资源不是应用独占，需要解决资源共享、通信等问题</li>\n</ul>\n<h3>2.1. <a name='ProxySandbox'></a>ProxySandbox(单实例沙盒)</h3>\n<p>基于Proxy的拦截和设置功能，通过Proxy拦截对全局对象的修改记录，在应用切换的时候还原全局对象</p>\n<pre><code>    /** 设置全局对象属性 */\n    const setWindowProp = (prop, value) => {\n        window[prop] = value\n    }\n\n    class SandBox {\n        name;\n        /** 代理对象 需要通过该对象操作沙盒 */\n        proxy = null;\n        /** 新增的修改 */\n        addedPropsMap = new Map();\n        /** 沙盒期间更新的修改 */\n        modifiedOriginValueProps = new Map();\n        /** 当前沙盒所做的修改 用于还原当前的沙盒 */\n        currentUpdatedProps = new Map();\n        /** 激活沙盒 */\n        active() {  \n            this.currentUpdatedProps.forEach((v, p) => {\n                setWindowProp(p, v)\n            })\n        }\n        /** 沙箱卸载 */\n        inactive() {\n            /** 修改的属性还原 */\n            this.modifiedOriginValueProps.forEach((v, p) => {\n                setWindowProp(p, v)\n            })\n            /** 增加的属性清空 */\n            this.addedPropsMap.forEach((_, p) => {\n                setWindowProp(p, undefined)\n            })\n        }\n        constructor(name) {\n            this.name = name;\n            const fakeWindow = Object.create(null)\n            const {\n                addedPropsMap,\n                modifiedOriginValueProps,\n                currentUpdatedProps,\n            } = this\n            const proxy = new Proxy(fakeWindow, {\n                get(target, prop) {\n                    return window[prop]\n                },\n                set(_, prop, value) {\n                    if(!window.hasOwnProperty(prop)) {\n                        /** window上没有该属性 新增 */\n                        addedPropsMap.set(prop, value)\n                    } else if(!modifiedOriginValueProps.hasOwnProperty(prop)) {\n                        /** window上有该属性且未更新,记录 */\n                        const originValue = window[prop] \n                        modifiedOriginValueProps(prop, originValue)\n                    }\n                    /** 记录当前沙盒的更新 */\n                    currentUpdatedProps.set(prop, value)\n                    /** 更新全局属性 */\n                    setWindowProp(prop, value)\n                    return true\n                }\n            })\n            this.proxy = proxy\n        }\n    }\n\n    const newSandBox = new SandBox('app')\n    const proxyWindow = newSandBox.proxy\n    proxyWindow.appName = 'app'\n    console.log(window.appName, proxyWindow.appName) // app app\n    newSandBox.inactive()\n    console.log(window.appName, proxyWindow.appName) // undefined undefined\n    newSandBox.active()\n    console.log(window.appName, proxyWindow.appName) // app app\n</code></pre>\n<h3>2.2. <a name='snapshotSandbox'></a>snapshotSandbox(单实例沙盒)</h3>\n<p>快照沙盒是在不支持Proxy的环境下，通过将window对象属性都复制到快照对象上然后再激活和卸载的时候对激活期间的diff进行添加或者回退.这个方案的对比方案较复杂，比如考虑到原型链的修改与还原问题，一般不作为沙盒方案的首选.</p>\n<pre><code>class SnapshotSandbox {\n    constructor(name) {\n        this.name = name;\n        this.proxy = window;\n        this.type = 'Snapshot';\n        this.sandboxRunning = true;\n        this.windowSnapshot = {};\n        this.modifyPropsMap = {};\n        this.active();\n    }\n    //激活\n    active() {\n        // 记录当前快照\n        this.windowSnapshot = {};\n        iter(window, (prop) => {\n            this.windowSnapshot[prop] = window[prop];\n        });\n\n        // 恢复之前的变更\n        Object.keys(this.modifyPropsMap).forEach((p) => {\n            window[p] = this.modifyPropsMap[p];\n        });\n\n        this.sandboxRunning = true;\n    }\n    //还原\n    inactive() {\n        iter(window, (prop) => {\n            if (window[prop] !== this.windowSnapshot[prop]) {\n                // 记录变更，恢复环境\n                this.modifyPropsMap[prop] = window[prop];\n            \n                window[prop] = this.windowSnapshot[prop];\n            }\n        });\n        this.sandboxRunning = false;\n    }\n}\n\nconst sandbox = new SnapshotSandbox();\nconst proxyWindow = sandbox.proxy\nsandbox.active();\nproxyWindow.appName = 'app'\nconsole.log(proxyWindow.appName, window.appName) // app app\nsandbox.inactive();\nconsole.log(proxyWindow.appName, window.appName) // undefined undefined\n</code></pre>\n<h3>2.3. <a name='-1'></a>多实例沙盒</h3>\n<p>多实例沙盒是Proxy实现的单实例的变种版，在Proxy实现的单实例沙盒中，Proxy的handler的get/set是直接操作的全局对象,多实例版本在handler的get/set中操作沙盒自己维护的对象，从而实现多实例模式</p>\n<pre><code>class MultiProxySandbox {\n    name;\n    proxy = null;\n    /** context 传入多实例沙盒共享数据 */\n    constructor(name, context={}){\n        this.name = name;\n        const fakeWindow = Object.create({});\n        const proxy =  new Proxy(fakeWindow,{\n        set(target, name, value){\n            /** 返回共享属性  */\n            if(Object.keys(context).includes(name)){\n                context[name] = value;\n            }\n            target[name] = value;\n        },\n        get(target,name){\n            // 优先使用共享对象\n            if(Object.keys(context).includes(name)){\n                return context[name];\n            }\n            if( typeof target[ name ] === 'function' &#x26;&#x26; /^[a-z]/.test(name)){\n            return target[ name ].bind &#x26;&#x26; target[ name ].bind( target );\n            } else {\n            return target[ name ];\n            }\n        }\n        })\n        this.proxy = proxy\n        return proxy\n    }\n}\n\nconst context = { document: window.document, globalData:'abc'};\nconst newSandBox1 = new MultiProxySandbox('app1',context);\nconst newSandBox2 = new MultiProxySandbox('app2',context);\nnewSandBox1.appName = 'app1'\nnewSandBox2.appName = 'app2'\nconsole.log(newSandBox1.appName, newSandBox2.appName, window.appName) // app1 app2 undefined\nconsole.log(newSandBox1.globalData, newSandBox2.globalData) // abc abc\n</code></pre>\n<h2>3. <a name='-1'></a>附录</h2>\n<p><a href=\"https://juejin.cn/post/6844904066225537037\">字节跳动的微前端沙盒实践</a><br>\n<a href=\"https://mp.weixin.qq.com/s/iLdAH9p2-S8pFyZrNzYaNg\">前端微服务在字节跳动的打磨与应用</a><br>\n<a href=\"https://cloud.tencent.com/developer/article/1748172\">谈谈微前端领域的js沙箱实现机制</a></p>","frontmatter":{"date":"2022-01-18","path":"/sandbox","title":"前端沙盒的实现方式"}}},"pageContext":{"readingTime":"7 min read"}},"staticQueryHashes":[]}