{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/2022-6-1",
    "result": {"data":{"markdownRemark":{"html":"<h2><a href=\"https://michel.codes/blogs/ui-as-an-afterthought\">UI AS AN AFTERTHOUGHT</a></h2>\n<p>这篇文章介绍作者对UI框架和状态管理的思考。在React中开发者通常会在组件中处理业务逻辑，这样导致UI和数据无法解耦。文章中的方式是让React做比较纯粹的渲染框架，业务逻辑组织在全局store中.</p>\n<h2><a href=\"https://mmazzarolo.com/blog/2022-02-16-track-down-the-javascript-code-responsible-for-polluting-the-global-scope/\">Track down the JavaScript code responsible for polluting the global scope</a></h2>\n<p>文章提供了基于ES6 proxy查找全局变量污染的方案</p>\n<h2><a href=\"https://github.com/reactjs/rfcs/blob/useevent/text/0000-useevent.md\">useEvent RFC</a></h2>\n<p>相关文章\n<a href=\"https://typeofnan.dev/what-the-useevent-react-hook-is-and-isnt/\">What the useEvent React hook is (and isn't)</a><br>\nreact增加了useEvent提案，使用场景能帮我们缓存一个函数的回调。主要用于解决如下的问题:</p>\n<ol>\n<li>通常的场景在组件中声明中的函数会因为依赖项的问题导致在渲染的时候函数会新生成引用，这样在使用该函数的子组件就会触发重新渲染。</li>\n<li>react hooks的依赖解耦 比如在一个effect hook中有两段业务逻辑，这样就需要把两段业务逻辑的依赖都加入到effect hook的依赖中，导致effect执行不符合预期。</li>\n</ol>\n<p>useEvent简化实现如下:</p>\n<pre><code>    function useEvent(handler) {\n        const handlerRef = useRef(null);\n\n        // In a real implementation, this would run before layout effects\n        useLayoutEffect(() => {\n            handlerRef.current = handler;\n        });\n\n        return useCallback((...args) => {\n            // In a real implementation, this would throw if called during render\n            const fn = handlerRef.current;\n            return fn(...args);\n        }, []);\n    }\n</code></pre>\n<p>useEvent可以看出是官方的解决前面提到问题的方案，在往前走一会，有如下的一些思考:</p>\n<ol>\n<li>是否需要一个不变的callback => 性能 vs 代码复杂度</li>\n<li>组件是否做了组件该做的事 => 渲染和业务逻辑的设计</li>\n</ol>\n<h2><a href=\"https://www.youtube.com/watch?v=NZoRlVi3MjQ\">The Story of Concurrent React </a></h2>\n<p>视频介绍react Concurrent发展的过程</p>\n<h2><a href=\"https://www.developerway.com/posts/react-key-attribute\">React key attribute: best practices for performant lists</a></h2>\n<p>文章介绍React组件中key使用的注意事项</p>\n<h2><a href=\"https://www.robinwieruch.de/react-hook-detect-click-outside-component/\">React Hook: Detect Click outside of Component</a></h2>\n<p>文章介绍如何实现一个自定义的hook来监听组件外的点击</p>\n<h2><a href=\"https://www.robinwieruch.de/web-applications/\">Web Applications 101</a></h2>\n<p>文章介绍web应用前端技术的发展过程，从最开始的web1.0到web2.0娓娓道来。</p>\n<h2>工具</h2>\n<h3><a href=\"https://github.com/timc1/kbar\">kbar</a></h3>\n<p>kbar是一个给站点提供快捷操作的工具</p>","frontmatter":{"date":"2022-06-06","path":"/2022-6-1","title":"2022-6-1-前端快报"}}},"pageContext":{"readingTime":"3 min read"}},
    "staticQueryHashes": ["256249292"]}