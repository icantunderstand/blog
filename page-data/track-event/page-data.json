{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/track-event",
    "result": {"data":{"markdownRemark":{"html":"<p>埋点在产品功能迭代和排查问题等场景能提供数据基础，以下梳理项目中使用的埋点方式</p>\n<h2>手动埋点</h2>\n<p>手动埋点是显示的在代码中插入代码，这种方式在精准性和定制化能力上更优，过多的手动埋点会增加项目的维护成本和影响系统的性能等。</p>\n<h2>自动化埋点</h2>\n<p>自动化相比手动埋点方式</p>\n<ul>\n<li>减少了人工的工作、数据收集方便也更加全面。适用于快速迭代中获取产品的相关用户数据。</li>\n<li>缺少灵活性 一些高阶数据诉求的埋点仍然需要手动添加实现</li>\n</ul>\n<h3>自动化埋点的一些实现方式</h3>\n<p>自动化埋点在于通过程序的方式去减少手动埋点的代码量，实现一些基础埋点比如PV/点击/停留时间的打点等，替代一部分自动化埋点的能力来降低整体项目埋点的压力，为项目卸压。</p>\n<h4>代码注入</h4>\n<p>通过babel插件的方式，对已有的元素的Click事件进行拼接，添加埋点逻辑，这样在出现点击行为的时候就自动实现了埋点的上报。</p>\n<pre><code>    // 简单示例\r\n    module.exports = function ({ types: t }) {\r\n        return {\r\n            visitor: {\r\n            FunctionDeclaration(path) {\r\n                // 在这里你可以添加逻辑来判断是否需要修改这个特定的函数\r\n                // 这里简单地选择所有函数，并添加一个新的 console.log 语句\r\n\r\n                const originalBody = path.node.body;\r\n                // 插图新的语句\r\n                const newStatement = t.expressionStatement(\r\n                    t.callExpression(t.memberExpression(t.identifier('console'), t.identifier('log')), [t.stringLiteral('New logic added!')])\r\n                );\r\n\r\n                path.node.body = t.blockStatement([newStatement, ...originalBody]);\r\n            },\r\n            },\r\n        };\r\n    };\n</code></pre>\n<h4>监听(观察者模式)</h4>\n<p>观察者模式能实现模块间的解耦，在实现自动化埋点的时候，可以在被观察者出现数据变更的时候，做对应的通过埋点逻辑</p>\n<pre><code>    import { observable, reaction } from 'mobx'\r\n\r\n    const searchParam = observable({\r\n        name: '',\r\n        age: '',\r\n    })\r\n    reaction(\r\n        () => ({ ...searchParam }),\r\n        (newValue, oldValue) => { \r\n            //发送埋点逻辑\r\n            sendEvent('搜索参数变更', {\r\n                newValue, \r\n                oldValue,\r\n            })\r\n        }\r\n    )\n</code></pre>\n<h4>提取范式</h4>\n<p>在人工埋点的基础上，通过抽象去减少人工埋点的代码，比如</p>\n<ul>\n<li>页面的PV可以在路由切换的时候去自动的打点</li>\n<li>项目通用参数可以在埋点函数中统一加入通用参数</li>\n<li>类似页面加载时长埋点可以提取通用的hook实现</li>\n</ul>\n<h2>埋点上的一些注意和思考</h2>\n<p>埋点主要是为了从数据侧拿到一些数据信息辅助后面的迭代规划。埋点能实现以下的功能</p>\n<ul>\n<li>用户行为分析</li>\n<li>业务决策支持</li>\n<li>性能监控</li>\n<li>异常监控</li>\n</ul>\n<p>需要注意的是埋点也需要进行治理</p>\n<ul>\n<li>维护性 开发一个项目通篇都是埋点代码那这个项目的可读性就很差了。</li>\n<li>性能\n<ul>\n<li>缓存队列 可以通过缓存队列 一次完成多个埋点的发送</li>\n<li>设置采样率</li>\n<li>减少触发频次  比如在端内场景通过bridge埋点涉及跟客户端通信，有可能会阻塞当前的UI操作，可以等待用户空闲的时候再进行埋点，例如react native中可以通过InteractionManager的runAfterInteractions来执行埋点逻辑</li>\n</ul>\n</li>\n</ul>","frontmatter":{"date":"2023-12-28","path":"/track-event","title":"埋点方案梳理"}}},"pageContext":{"readingTime":"5 min read"}},
    "staticQueryHashes": []}