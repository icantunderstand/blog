{
    "componentChunkName": "component---src-templates-index-js",
    "path": "/3",
    "result": {"pageContext":{"pageAllCount":91,"group":[{"node":{"id":"b291531c-f09d-5949-920b-5523a387a6ab","html":"<h2><a href=\"https://frontendmastery.com/posts/rethinking-react-best-practices/\">Rethinking React best practices</a></h2>\n<p>这篇文章介绍React发展的过程，从SPA的方式开始，讲述SPA存在的一些问题，然后React在服务端有一些尝试为了解决SPA的问题，引入Suspense、流式渲染、React Server Component等。在文章开头对软件开发中的问题的描述很有意思: 人的问题&#x26;技术的问题。非常不错的文章</p>\n<h2><a href=\"https://www.jvandemo.com/a-10-minute-primer-to-javascript-modules-module-formats-module-loaders-and-module-bundlers/\">A 10 minute primer to JavaScript modules, module formats, module loaders and module bundlers</a></h2>\n<p>这篇文章简要的介绍了JavaScript中模块的发展历史，包括IIFE、AMD、CMD、UMD、System.register、ES6模块等</p>\n<h2><a href=\"https://www.honeybadger.io/blog/javascript-regular-expressions/\">Regular expressions in JavaScript</a></h2>\n<p>这篇文章介绍JavaScript中的正则表法式，详细的介绍了正则表达式的创建、使用、匹配等</p>\n<h2><a href=\"https://www.bbss.dev/posts/eventloop/\">Practical Guide To Not Blocking The Event Loop</a></h2>\n<p>文章通过在node服务器中一个长时间执行任务阻断后续请求的例子来讲解如何防止阻塞时间循环，文中的配图通俗易懂\nwoqu</p>\n<h2>工具</h2>\n<h3><a href=\"https://github.com/FormidableLabs/react-live\">react-live</a></h3>\n<p>一个实现预览react组件代码的库</p>\n<h3><a href=\"https://webcontainers.io/\">Dev environments.In your web app</a></h3>\n<p>可以在浏览器环境中运行node的工具</p>\n<h3><a href=\"https://shoelace.style/\">Shoelace</a></h3>\n<p>web components组件库</p>\n<h3><a href=\"https://github.com/typicode/lowdb\">lowdb</a></h3>\n<p>一个JSON存储数据库，支持在node/浏览器环境中使用</p>\n<h2><a href=\"https://github.com/hakimel/reveal.js\">reveal.js</a></h2>\n<p>一个实现网页演示文稿的工具</p>","fields":{"readingTime":{"text":"2 min read"}},"frontmatter":{"title":"2023-5-1-前端快报","date":"2023-05-01","tags":"前端快报","path":"/2023-5-1","top":null,"summary":null}}},{"node":{"id":"ba292735-2f0e-54e1-8d03-d6181419a3c5","html":"<p>最近在梳理B端场景一些技术点，重新又思考了下B端场景和C端场景在技术侧一些差异点。抛开场景说技术都是耍流氓。自己刚好有B端和C端广告业务的背景经历，下面就结合广告业务来梳理下自己对B端和C端前端技术侧差异的一点理解。</p>\n<h2>面向用户的差异</h2>\n<p>面向用户的差异决定着业务具体的展现形式区别。</p>\n<ul>\n<li>在C端的广告场景中，有可能通过互动玩法、多端分发、样式和场景的迭代来吸引用户对广告的关注，达到广告主的推广诉求。从这点上看在C端的广告场景中就涉及到跨端技术、样式动态化、互动玩法沉淀等。</li>\n<li>在B端的广告场景中, 面向的是广告主，广告主的诉求就是如何高效快速的创建并且优化广告进行持续投放，广告投放的好更多在冰山水下的部分，比如引擎算法、策略、流量分发等，这里面需要结合整个平台的用户体验进行考量。在冰山的水面部分，就涉及到广告的搭建而不同的广告会有不同的展示形式。也就意味着平台需要储备广告的同构渲染技术、低代码方案、配置化能力等</li>\n</ul>\n<h2>面向端的渲染技术差异</h2>\n<h3>B端特点</h3>\n<ul>\n<li>在B端业务中主要的渲染场景是浏览器，容器相对单一。在业务编写的时候只需要关注主流PC浏览器的差异即可。</li>\n<li>广告同构渲染技术，一个广告的搭建需要在B端给用户及时页面展示，同时在C端场景结合具体的容器渲染对应的广告。这里面有可能涉及到一码多投(编译成不同容器的代码)、SSR渲染等</li>\n<li>B端主要是PC浏览器场景，资源的编译发布流程相对简单，静态资源多通过部署到CDN平台即可。可能会涉及到SPA/MPA/SEO/SSR等技术方案</li>\n</ul>\n<h3>C端特点</h3>\n<ul>\n<li>在C端业务中，主要涉及到端容器的不同。比如安卓IOS容器、特定端不同版本容器、用户手机浏览器、微信小程序等，需要处理端差异并且涉及到的技术挑战也更多</li>\n<li>C端的发布场景涉及到多容器，就涉及到编译过程的多版本构建和分发并且由于C端对用户的触达诉求高，就涉及到端的动态下发，容器的预渲染技术等。</li>\n</ul>\n<h2>面向业务的复杂度差异</h2>\n<h3>B端特点</h3>\n<p>B端业务主要在于流程的完善，以一个普通的广告为例\n* 在广告创建阶段有投前工具和广告预览能力\n* 在投中阶段有广告数据展示、相关操作、投中工具等\n* 在投后阶段有数据报表等\n从上面的分析中，可以分阶段梳理一些技术点，</p>\n<ul>\n<li>动态化表单(<a href=\"https://github.com/rjsf-team/react-jsonschema-form\">react-jsonschema-form</a>, <a href=\"https://formilyjs.org/zh-CN\">Formily</a>)、配置化列表(<a href=\"https://pro.ant.design/zh-CN/\">ANT DESIGN PRO</a>), 配置化报表能力。主要为了解决迭代的效率问题</li>\n<li>状态管理工具比如<a href=\"https://mobx.js.org/README.html\">mobx</a>,<a href=\"https://github.com/reduxjs/redux-toolkit\">redux-toolkit</a>,<a href=\"https://recoiljs.org/zh-hans/\">recoil</a>,在相对复杂的场景需要考虑状态管理库对页面性能的影响和内存占用等</li>\n<li>B端在项目复杂度治理上有可能涉及到monorepo、微前端方案等</li>\n<li>数据请求库会使用一些功能相对较多的请求方案比如<a href=\"https://github.com/TanStack/query\">react-query</a></li>\n</ul>\n<h3>C端特点</h3>\n<p>C端业务的复杂度在于变化，同样的广告有可能会有不同的样式或者不同的玩法，不像B端业务相对在发展路径上是有一定预期的。主要涉及到的一些技术点</p>\n<ul>\n<li>动效(动画)等能力储备</li>\n<li>多端环境差异的磨平，比如胶水层bridge方法的封装、编译层功能的优化</li>\n<li>轻量级的状态管理方案，比如React的context API,<a href=\"https://github.com/pmndrs/zustand\">zustand</a>，同时需要做好粒度的空间，减少组件的重复渲染</li>\n</ul>\n<h2>性能考量的差异</h2>\n<p>在C端场景中，以广告为例如果广告加载速度慢或者广告加载失败，就意味这次广告流量的丢失，可能存在的广告收入就丢失了。所以在C端场景在性能考量上要更极致，更细致。</p>\n<ul>\n<li>有不同的动态化技术出现，比如React Native或者其他的编译DSL方案减少中间层直接渲染Native View.</li>\n<li>链路埋点</li>\n<li>页面展示后操作的优化，页面操作可能涉及到与容器通信，需要进行优化</li>\n</ul>\n<p>在B端场景，有可能涉及多个模块、多个资源的加载问题，就需要对项目资源进行划分，做好加载策略。异步资源、动态加载资源拆分、大文件处理等问题。</p>\n<h2>一些共同点</h2>\n<ul>\n<li>项目稳定性 报错的降噪处理、排障流程、CR流程、开发流程规范</li>\n<li>普适的性能优化考量</li>\n</ul>","fields":{"readingTime":{"text":"7 min read"}},"frontmatter":{"title":"对B端C端业务差异从技术侧(前端)上的一点理解","date":"2023-03-29","tags":"思考","path":"/diff-b-and-c","top":null,"summary":null}}},{"node":{"id":"8db958ce-ae0c-50fa-aa5a-8a3813929e62","html":"<p>h5性能优化可以总结为如下的几个方向:</p>\n<ul>\n<li>将请求时间线上的行为提前执行</li>\n<li>将请求时间线上不紧急的后置</li>\n<li>将资源从最近的位置提供给页面</li>\n</ul>\n<p>在讨论h5加载性能的时候主要有以下角色:</p>\n<ul>\n<li>Native容器</li>\n<li>用户(开发的视角)</li>\n<li>服务端(数据/页面)</li>\n<li>h5页面</li>\n</ul>\n<p>本文会结合优化的方向从不同角色的角度总结h5优化的一些通用方案。</p>\n<h2>Native容器优化</h2>\n<ul>\n<li>Webview池 通过提前初始Webview和Webview复用降低Webview初始化时间</li>\n<li><a href=\"https://icantunderstand.github.io/blog/cross-platform-prefetch\">数据预取</a> 容器侧提供数据预取能力，提前数据加载</li>\n<li>DNS连接 容器提前建立与h5页面相同域名的DNS链接</li>\n<li><a href=\"https://icantunderstand.github.io/blog/cross-platform-offline\">离线包</a> 通过离线包可以直接加载提前下载好的本地资源展示</li>\n</ul>\n<h2>h5页面内优化</h2>\n<ul>\n<li>预连接 dns-prefetch, preconnect</li>\n<li>资源包拆分 框架和业务代码进行拆包，框架层使用更长的缓存策略来减少框架代码的请求</li>\n<li>页面资源加载 图片懒加载、路由懒加载、小图内联、模块动态加载</li>\n<li>js执行优化 缓存计算结果、WebWorker、GPU渲染、长列表优化</li>\n<li>脚本标签优化\n<ol>\n<li>defer 等待html解析完毕后执行 多个defer文件按顺序执行</li>\n<li>async 下载后立即执行无顺序</li>\n</ol>\n</li>\n</ul>\n<h2>服务端优化</h2>\n<ul>\n<li>api聚合服务 前端侧可以通过一个请求聚合多个后端请求，后端在内网完成数据的聚合</li>\n<li>CDN容灾策略</li>\n<li>预渲染技术\n<ol>\n<li><a href=\"https://www.patterns.dev/posts/server-side-rendering\">SSR</a>(server-side rendering)服务端渲染,在服务端完成数据请求和html内容的生成返回给用户</li>\n<li><a href=\"https://www.patterns.dev/posts/static-rendering\">SSG</a>(static site generation)静态页面生成，SSG主要用于生成静态的网站比如博客等</li>\n<li><a href=\"https://www.patterns.dev/posts/incremental-static-rendering\">ISR</a>（Incremental Static Generation)渐进式静态内容生成，可以增量的方式在服务端生成新的内容和替换已有内容，对SSG的一种补充</li>\n<li><a href=\"https://www.patterns.dev/posts/react-selective-hydration\">Selective Hydration</a> 可选的注水 通过Suspense和pipeToNodeStream流式输入实现可选注水</li>\n<li><a href=\"https://www.patterns.dev/posts/islands-architecture\">Islands Architecture</a> 孤岛架构,可以实现静态和动态内容的分离渲染，可以对组件渲染更细粒度的控制</li>\n</ol>\n</li>\n</ul>\n<h2>用户</h2>\n<ul>\n<li>功能取舍 低端机放弃一些功能保证页面更流畅</li>\n<li>骨架屏 使用骨架屏在数据未返回时给用户更好的体验</li>\n<li><a href=\"https://blog.ihanai.com/2020/12/comparison-of-solution-for-same-layer-render.html\">同层渲染</a></li>\n</ul>\n<h2>参考</h2>\n<p><a href=\"https://tech.meituan.com/2017/06/09/webviewperf.html\">WebView性能、体验分析与优化</a>\n<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work\">渲染页面：浏览器的工作原理</a>\n<a href=\"https://blog.ihanai.com/2020/12/comparison-of-solution-for-same-layer-render.html\">同层渲染方案比较</a></p>","fields":{"readingTime":{"text":"4 min read"}},"frontmatter":{"title":"web性能优化总结","date":"2023-03-15","tags":"跨端技术","path":"/h5-performance","top":null,"summary":null}}},{"node":{"id":"c0b8240b-60ad-5807-ab22-6ef623c38f71","html":"<p>在维护大型项目的时候，随着项目功能的迭代会出现委会的一些痛点，比如</p>\n<ul>\n<li>页面打包、开发启动过程慢，模块间逻辑冗余，模块间功能依赖导致牵一发而动全身</li>\n<li>项目规范难以实行，不同模块同学开发的代码理解成本大</li>\n<li>功能和逻辑共享问题</li>\n</ul>\n<p>本文在以上问题的基础上，梳理自己对项目维护的一点思考</p>\n<h2>重新认识项目</h2>\n<p>不同的项目类型决定了项目不同的技术方案和业务发展模式，当前对项目维护上的一些决策是可以结合到当前的现状和未来的业务发展做提前规划的。比如在C端项目中会侧重于用户侧的性能和体验的探索，那么在技术方案上就会比较激进，要考虑好方案的回退等。在B端项目侧重于稳定性、功能流程的完善性，单个项目周期较长。长期项目和短期项目的思考点又有些不同。如果项目是作为服务模块提供给使用者，这个使用者可以是我们自身或者业务同事，那么就需要思考如何在不影响原有的架构模式上提供服务。</p>\n<h3>项目的组织方式</h3>\n<p>这里谈的是项目的拆分和聚合。可以通过monorepo的方式把依赖项目管理起来或者把不长维护的模块拆分出去。通用的模块拆出来进行维护，这里的拆可以是渐进的，先在项目维度进行拆分，防止过度拆分引起的后续维护问题.模块可以通过框架层面进行共享和注入。</p>\n<h3>模块之间的解耦(分层、共享)</h3>\n<p>代码不好维护有一定程度上跟模块的治理有关，模块间没有更好的做好分层，功能的拆分，就会导致业务逻辑分散，功能不聚合。\n在前端应用中，要思考业务、数据逻辑与视图逻辑的拆分</p>\n<h2>项目的规范(项目中的人)</h2>\n<p>项目中的规范是比较难实行的，比如设计到代码书写方式上的问题，不同人的理解真的很大不同，对于这部分应该要认可人之间的不同，在项目中建工具化的规范，通过工具去限制人的行为。比如lint 规范、大文件拆分、核心代码注释，尽可能通过框架去限制不合理的代码操作,这里举个例子比如项目中涉及到静态图片的展示，大图对用户的代码和体验都有损失，那么就可以通过编译时脚本来检查图片资源目录，当出现大图文件时中断编译或者通知。</p>\n<p>代码是与机器交互的语言,也是开发者之间交流的一种方式.之所以要提倡编写可维护的代码是希望在同一个团队中形成统一的方言.这种独特的方言要在一定程度上提高开发的效率(不好的方言有可能降低开发效率).也许团队这段时间会使用这种方言,过段时间会换另一种方言.自己的建议是多思考,多想想方言之间的不同,为什么这种模式会适应现在的场景,慢慢的你就会建立一种你自己的方言或者思考问题的方式.</p>\n<h2>参考</h2>\n<p><a href=\"https://juejin.im/post/5b3ae175f265da63252c2f21\">代码质量与规范，那些年你欠下的技术债</a><br>\n<a href=\"https://www.zhihu.com/question/20017545\">好的提高代码质量的方法有哪些</a><br>\n<a href=\"https://overreacted.io/zh-hans/goodbye-clean-code/\">Goodbye, Clean Code</a></p>","fields":{"readingTime":{"text":"5 min read"}},"frontmatter":{"title":"在聊维护项目的时候我们在聊什么","date":"2023-03-08","tags":"工程化","path":"/organize-code","top":null,"summary":null}}},{"node":{"id":"1a5c275d-51a1-5b48-a911-e35eefd0ce40","html":"<h2><a href=\"https://dev.to/codux/experiments-with-the-javascript-garbage-collector-2ae3\">Experiments with the JavaScript Garbage Collector</a></h2>\n<p>这篇文章通过一些demo例子来理解JavaScript的垃圾回收</p>\n<h2><a href=\"https://martinfowler.com/articles/modularizing-react-apps.html\">Modularizing React Applications with Established UI Patterns</a></h2>\n<p>模块化、业务逻辑与视图分离是构建可维护性强应用的一些基础方式，这篇文章通过例子来说明模块化、抽象化的过程。仔细阅读有收获</p>\n<h2><a href=\"https://deno.com/blog/you-dont-need-a-build-step\">You Don't Need a Build Step</a></h2>\n<p>这篇文章通过前端代码的编译引出<a href=\"https://fresh.deno.dev/\">fresh</a>这个框架，fresh支持实时的编译和转换，现在已经有10k+的star,值得关注</p>\n<h2><a href=\"https://betterprogramming.pub/all-javascript-and-typescript-features-of-the-last-3-years-629c57e73e42\">All JavaScript and TypeScript Features of the last 3 years</a></h2>\n<p>这篇文章介绍JavaScript和TypeScript最近三年的一些features,这里主要整理下avaScript的一些新features.\nES2020: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">可选链</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing\">空值合并运算符</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled\">Promise.allSettled()</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a><br>\nES2021: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\">String.replaceAll()</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/any\">Promise.any</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment\">逻辑空赋值</a><br>\nES2022: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await#%E5%9C%A8%E9%A1%B6%E5%B1%82%E4%BD%BF%E7%94%A8_await\">Top level await</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn\">hasOwn</a></p>\n<h2><a href=\"https://www.robinwieruch.de/react-starter/\">How to start a React Project in 2023</a></h2>\n<p>之前关于react项目的starter工具引发了一波讨论，这篇文章介绍了(Vite)[<a href=\"https://vitejs.dev/%5D%E3%80%81(Next)%5Bhttps://nextjs.org/%5D%E3%80%81\">https://vitejs.dev/]、(Next)[https://nextjs.org/]、</a><a href=\"https://astro.build/\">Astro</a>作为React项目初始化的优点和缺点</p>\n<h2><a href=\"https://react.dev/\">React</a></h2>\n<p>react最新的文档站点，文档在入门的介绍上和api的查看上相对之前的文档站都有一定的提升</p>\n<h2>工具</h2>\n<h2><a href=\"https://github.com/vadimdemedes/ink\">ink</a></h2>\n<p>一个可以在命令行中写React代码的工具库</p>\n<h2><a href=\"https://github.com/lucaong/minisearch\">MiniSearch</a></h2>\n<p>MiniSearch是一个实现搜索功能的库,他运行在内存中，有模糊搜索等能力，在博客的站点上试用了一下感觉还不错</p>\n<h2><a href=\"https://github.com/rogchap/v8go\">v8go</a></h2>\n<p>用Go语言执行javascript</p>\n<h2><a href=\"https://github.com/microsoft/playwright\">playwright</a></h2>\n<p>Playwright是一个微软出品的web测试和自动化工具，github上的star已经49k</p>","fields":{"readingTime":{"text":"2 min read"}},"frontmatter":{"title":"2023-3-1-前端快报","date":"2023-03-01","tags":"前端快报","path":"/2023-3-1","top":null,"summary":null}}},{"node":{"id":"e3ace596-3e3b-503f-9749-e050e7ba90aa","html":"<p>在聊关于价值的一点想法之前，请让我介绍一部我喜欢的电影作为引子-Once upon a time in America(美国往事)。我微信的昵称是noodles，也是因为这部电影。</p>\n<p>美国往事是一部讲述美国20世纪60年代生活的犯罪电影，主角noodles(面条)在街区中结识了一群小伙伴，最开始过着调皮捣蛋的快乐生活，随着新搬来的邻居Max(麦克斯)的到来，大家逐渐去做一些犯罪和帮派的活动，在剧情不断发展中，跟随noodles经历了童年的欢乐、青涩的爱情、友情、遗憾、无奈。在'生意'逐渐做大的时候，他们一伙人想要铤而走险，noodles为了挽救他们的生命，选择了举报他们的行动，结果行动被破坏但是伙伴们都死于那次举报。noodles抱着悔恨远走他乡。多年以后，一封信把noodles叫回了故乡，此时的noodles已经头发发白，岁月在他身上有了明显的痕迹。这次他遇到了之前痛而不得的爱人，也遇到了自己的老友-Max.原来Max在之前的行动中做了个局，在那次行动中，Max并没有死而noodles被迫远走之后，Max占据了大家一起打拼的事业，‘一帆风顺’当上了部长。Max此时已经无法自保，他想向noodles坦白自己之前做的事，让noodles了结他的生命。印象中深刻的台词就这里发生了，当Max坦白，noodles却不愿意拿枪杀死他，画面切回了之前他们一起经历的快乐时光。noodles说: it`s just the way i see things(这是我对人生的看法)，I hava a story alse(我也有一个关于你说的故事)。在noodles讲述的故事中他因为自己的举报导致挚友去世感到悔恨一生，但是他们之间有真挚的友谊。最后nodles走之间对Max说希望调查的结果没有问题，否则一生的忙碌到最后没有结果很遗憾。最后Max自杀，电影闪回了noodles去烟管吸烟的场景，最后电影定格在noodles的笑容中。</p>\n<p>最近看了好几遍电影的后面部分，还是有些理解不好nooldes最后的笑容，不过渐渐地理解noodles的: I hava a story alse(我也有一个关于你说的故事).也许人生的价值或者意义就在于我们的看法。同样的人生也会因为看法不同导致感受。</p>\n<p>----一个长的引子的分割线----</p>\n<h2>什么是价值</h2>\n<p>亚里士多德将生活分为三类：动物式的生活，政治的生活和沉思的生活。</p>\n<ul>\n<li>动物式的生活指受到动物本能的指引，在缺少理智的参与下，过着无节制的生活</li>\n<li>政治的生活指人具有社会属性，可以放弃一些动物的本能去追求荣誉、善</li>\n<li>沉思的生活指通过思考达到精神的愉悦状态</li>\n</ul>\n<p>我理解在对这三种生活划分的时候，是没有贬义的，因为我们都或多或少的因为生活的阶段、能力的限制在间插似的体验不同的生活。在这个过程中不可避免的会对我们做的事，过的生活进行思考。这里其实就引入了价值的思考。如果生活的最终目的是幸福，当然这个幸福是相对的主观的。也许一个人的幸福是到老了回忆起年轻的一个蠢事或者儿孙满堂或者家缠万贯，幸福的定义虽有不同却大致相似。那价值就是那些拓宽我们关于幸福定义的事。</p>\n<h2>追求价值的方式</h2>\n<p>在去年开始相对集中的阅读，因为觉得自己在好像还看不明白一些事也想不明白。最近在看张维迎《经济学原理》一书中引发了我对价值这个问题的思考。在经济学中有个概念叫-生产可能性边界，用来表示经济社会在既定资源和技术条件下所能生产的各种商品最大数量的组合。这里可以用这个边界来类比幸福的范围.那我们生活的目标就集中在如何扩大幸福的边界和范围了。<br>\n我想年龄的焦虑一个主要的原因可能是在可见的未来能预测到幸福的边界会收缩，比如职场的35岁年龄焦虑，认为在未来年龄不在具有竞争力，那幸福的面积就可预测的缩小了。所以我理解追求幸福其实就是个逐步的拓宽边界的行为。这个行为可以很简单，比如早起、多运动、多陪伴家人。也可以相对复杂，比如创办一个家乡企业、写一本有意思的书。也可以比较抽象，比如在夏天的时候做个清凉的白日梦、在冬天的时候听听雪。</p>\n<h2>价值的相对性</h2>\n<p>说到底人生经历的事情还是自己和最亲密的人一起经历的，那价值就有很强的主观性，如果一直想让自己适应社会的价值想法会一直处于比较较劲的状态。不过关于价值这个问题自己也没有想的特别明白，也希望自己能一直想想这个问题。也希望跟看到这里的你一起想好这个问题，也许当有天有人带着鄙夷的语气问你生活的价值和意义的时候，你会告诉他: I hava a story alse(我对人生有不同的看法)</p>","fields":{"readingTime":{"text":"8 min read"}},"frontmatter":{"title":"关于价值的一点想法","date":"2023-02-26","tags":"思考","path":"/thought-about-value","top":null,"summary":null}}}],"pathPrefix":"","first":false,"last":false,"index":3,"pageCount":16,"additionalContext":{"pageAllCount":91}}},
    "staticQueryHashes": []}