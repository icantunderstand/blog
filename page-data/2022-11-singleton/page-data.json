{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/2022-11-singleton",
    "result": {"data":{"markdownRemark":{"html":"<p>这个系列是<a href=\"https://www.patterns.dev/\">Improve how you architect webapps</a>上文章的读书笔记。</p>\n<h2>单例模式</h2>\n<p>单例模式通过全局维护一个实例的方式来达到全局属性的共享和减少内存的占用。单例的简单实现如下:</p>\n<pre><code>    let instance;\n    let counter = 0;\n    class Counter {\n        constructor() {\n            if (instance) {\n                throw new Error(\"You can only create one instance!\");\n            }\n            instance = this;\n        }\n        getInstance() {\n            return this;\n        }\n        getCount() {\n            return counter;\n        }\n        increment() {\n            return ++counter;\n        }\n        decrement() {\n            return --counter;\n        }\n    }\n    const singletonCounter = Object.freeze(new Counter());\n    // 暴露给外部的单一实例\n    export default singletonCounter;\n</code></pre>\n<p>单例模式的优点也恰恰是他的缺点，由于全局属性的共享导致改动的全局污染问题、测试用例写法问题等。在react中全局的redux\\context store就是应用中的单例，store通过单向的数据流来规避单例的一些问题。</p>\n<h2>Proxy(代理)模式</h2>\n<p>代理模式通过为对象提供占位符来控制对象的访问。代理对象相当于中间人角色，可以在不改变被代理对象的接口的情况下扩展功能。在JavaScript中可以使用Proxy来实现代理的功能。</p>\n<pre><code>    const person = {\n        name: \"John Doe\",\n        age: 42,\n        nationality: \"American\"\n    };\n    const personProxy = new Proxy(person, {\n        // handler的get/set方法代理了被代理对象属性的访问方法\n        get: (obj, prop) => {\n            console.log(`The value of ${prop} is ${obj[prop]}`);\n            // 可以用Reflect修改代理对象的属性\n            Reflect.set(obj, prop);\n        },\n        set: (obj, prop, value) => {\n            console.log(`Changed ${prop} from ${obj[prop]} to ${value}`);\n            obj[prop] = value;\n            return true;\n        }\n    });\n    personProxy.name;\n    personProxy.age = 43;\n</code></pre>","frontmatter":{"date":"2022-11-01","path":"/2022-11-singleton","title":"5分钟速读系列-单例模式/代理模式"}}},"pageContext":{"readingTime":"2 min read"}},
    "staticQueryHashes": []}